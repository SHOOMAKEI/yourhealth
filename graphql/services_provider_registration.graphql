type Query @guard {
    serviceCategories(trashed: Trashed @trashed): [ServiceCategory!]!  @all 
    serviceCategory(id: ID @eq): ServiceCategory @find
    serviceSubCategories(trashed: Trashed @trashed): [ServiceSubCategory!]!  @paginate(defaultCount: 10) 
    serviceSubCategory(id: ID @eq): ServiceSubCategory @find
    services(trashed: Trashed @trashed): [Service!]!  @paginate(defaultCount: 10) 
    service(id: ID @eq): Service @find
}

type Mutation @guard {
    createServiceCategory(name: String!, description: String!): ServiceCategory @create
    updateServiceCategory(id: ID!, name: String!, description: String!): ServiceCategory @update
    deleteServiceCategory(id: ID!): ServiceCategory @delete
    createServiceSubCategory(service_category_id: ID!, name: String!, description: String!): ServiceSubCategory @create
    updateServiceSubCategory(service_category_id: ID!, id: ID!, name: String!, description: String!): ServiceSubCategory @update
    deleteServiceSubCategory(id: ID!): ServiceSubCategory @delete
    createService(service_sub_category_id: ID!, name: String!, description: String!): Service @create
    updateService(service_sub_category_id: ID!, id: ID!, name: String!, description: String!): Service @update
    deleteService(id: ID!): Service @delete
}

type ServiceCategory {
    id: ID!
    name: String!
    description: String!
    status: Boolean!
    services_sub_categories: [ServiceSubCategory!] @hasMany
    services:[Service!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type ServiceSubCategory {
    id: ID!
    name: String!
    description: String!
    status: Boolean!
    services_category: ServiceCategory! @belongsTo
    services:[Serviece!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Service {
    id: ID!
    name: String!
    description: String!
    status: Boolean!
    services_sub_category: ServiceSubCategory! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

enum Trashed {
  ONLY @enum(value: "only")
  WITH @enum(value: "with")
  WITHOUT @enum(value: "without")
}