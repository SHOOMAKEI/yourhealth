
type Query {
    users: [User!]! @guard  @paginate(defaultCount: 10) 
    user(id: ID @eq): User  @guard @find
    me: User @auth
    provider_sub_levels: [ProviderSubLevel!]! @all 
    serviceCategories(trashed: Trashed @trashed): [ServiceCategory!]! @guard  @all 
    serviceCategory(id: ID @eq): ServiceCategory  @guard @find
    serviceSubCategories(trashed: Trashed @trashed): [ServiceSubCategory!]! @guard @all 
    serviceSubCategory(id: ID @eq): ServiceSubCategory  @guard @find
    services(trashed: Trashed @trashed): [Service!]! @guard  @all 
    service(id: ID @eq): Service  @guard @find
    requestedService(orderBy: _ @orderBy(columns: ["created_at"])): RequestedService @all 
    unverifiedServiceProviderRequests: [ProviderProfile]
        @field(resolver: "App\\Http\\Controllers\\Api\\Admin\\ProviderProfileAdminController@index")
    providerProfileInfo:ProviderProfile @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderProfileInfo")
    providerCompanyInfo:ProviderCompany @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderCompanyInfo")
    providerFacilityInfo:[ProviderFacility] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderFacilityInfo")
    educationQualificationInfo:[ProviderQualification] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getEducationQualificationInfo")
    medicalRegistrationInfo:[ProviderMedicalRegistration] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getMedicalRegistrationInfo")
    providerProfileServicesInfo:[ProviderProfileServices] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderProfileServicesInfo")
    providerFacilityServicesInfo(id: ID @rules(apply: ["required","exists:provider_facilities,id"])):[ProviderFacilityServices] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderFacilityServicesInfo")
    providerProfileInfoWithId(id:ID @rules(apply:["required", "exists:provider_profiles,id"])):ProviderProfile @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderProfileInfoWithId")
    providerCompanyInfoWithId(id:ID @rules(apply:["required", "exists:provider_profiles,id"])):ProviderCompany @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderCompanyInfoWithId")
    providerFacilityInfoWithId(id:ID @rules(apply:["required", "exists:provider_profiles,id"])):[ProviderFacility] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderFacilityInfoWithId")
    educationQualificationInfoWithId(id:ID @rules(apply:["required", "exists:provider_profiles,id"])):[ProviderQualification] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getEducationQualificationInfo")
    medicalRegistrationInfoWithId(id:ID @rules(apply:["required", "exists:provider_profiles,id"])):[ProviderMedicalRegistration] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getMedicalRegistrationInfo")
    providerProfileServicesInfo:[ProviderProfileServices] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderProfileServicesInfo")
    providerFacilityServicesInfo(id: ID @rules(apply: ["required","exists:provider_facilities,id"])):[ProviderFacilityServices] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\AccountRegistrationController@getProviderFacilityServicesInfo")
}

type Mutation {
    #account creation 
    createAccount(input: AccountInput): User 
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@create")
    updateProviderProfile(input: ProviderProfileInput): ProviderProfile @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@updateProviderProfile")
    createOrUpdateProviderCompany(input: ProviderCompanyInput): ProviderCompany @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@createProviderCompany")
    createProviderFacility(input: ProviderFacilityInput): ProviderFacility @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@createProviderfacility")
    updateProviderFacility(input: UpdateProviderFacilityInput): ProviderFacility @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@updateProviderfacility")
    createProviderQualification(input: ProviderQualificationInput): ProviderQualification @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@createProviderQualification")
    updateProviderQualification(input: UpdateProviderQualificationInput): ProviderQualification @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@updateProviderQualification")
    createProviderMedicalRegistration(input: ProviderMedicalRegistrationInput): ProviderMedicalRegistration @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@createProviderMedicalRegistration")
    updateProviderMedicalRegistration(input: UpdateProviderMedicalRegistrationInput): ProviderMedicalRegistration @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@updateProviderMedicalRegistration")
    createProviderProfileServices(input: [ProviderProfileServicesInput]): [ProviderProfileServices] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@createProviderProfileServices")
    createProviderFacilityServices(input: ProviderFacilityServicesInput): [ProviderFacilityServices] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@createProviderFacilityServices")
    createProviderProfileCalendar(input: [DaySessionInput]): [DaySession] @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@createProviderProfileCalendar")
    createRequestedService(input: RequestedServiceInput): RequestedService @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@createRequestedService")
    submittProfileForVerification: ProviderProfile @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Registration\\CreateNewUserAccountController@submitted")
    verifyServiceProviderRequest(id:ID @rules(apply:["required", "exists:provider_profiles,id"])): ProviderProfile @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Admin\\ProviderProfileAdminController@verify")
    unVerifyServiceProviderRequest(input: RejectionReasonInput): ProviderProfile @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Admin\\ProviderProfileAdminController@unverify")
    
    #authentication mobile
    login(input: loginInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@login")
    logout(input: logoutInput): loginResponse @guard 
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@logout")
    verifyOtpCode(input: verifyOtpCodeInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@verifyOtpCode")
    resendOtpCode(input: resendOtpCodeInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@resendOtpCode")
    resendMobileNumberVerificationCode(input: resendMobileNumberVerificationCodeInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@resendMobileNumberVerificationCode")
    resendEmailVerification(input: resendEmailVerificationInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@resendEmailVerification")
    checkEmailVerification(input: checkEmailVerificationInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@checkEmailVerification")
    updateUserPassword(input: updateUserPassword): Response @guard
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\PasswordController@update")
    resetUserPasswordViaOtp(input: resetUserPasswordViaOtpInput): Response 
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\PasswordController@resetUserPasswordViaOtp")
    resetUserPasswordViaEmail(input: resetUserPasswordViaEmailInput): Response 
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\PasswordController@resetUserPasswordViaEmail")
    verifyUserPasswordViaOtp(input: verifyUserPasswordViaOtpInput): Response 
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\PasswordController@verifyUserPasswordViaOtp")
    verifyUserPasswordViaEmail(input: verifyUserPasswordViaEmailInput): Response 
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\PasswordController@resetUserPasswordViaEmail")
    # enableOtp(input: enable): Response @guard
    #     @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\PasswordController@update")


    #authentication session
    loginSession(input: loginSessionInput!): loginSessionResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\AuthenticatedSessionSPAController@login")
    logoutSession(input: logoutSessionInput): loginSessionResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\AuthenticatedSessionSPAController@logout")
    verifyOtpCodeSession(input: verifyOtpCodeInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\AuthenticatedSessionSPAController@verifyOtpCode")
    verifyMobileNumberSession(input: verifyMobileNumberSessionInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\AuthenticatedSessionSPAController@VerifyMobileVerificationCode")
    checkEmailVerificationSession(input: checkEmailVerificationInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\AuthenticatedSessionSPAController@checkEmailVerification")
    # resendOtpCodeSession(input: resendOtpCodeInput!): loginResponse
    #     @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@resendOtpCode")
    # resendMobileNumberVerificationCodeSession(input: resendMobileNumberVerificationCodeInput!): loginResponse
    #     @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\MobileAuthController@resendMobileNumberVerificationCode")
    resendEmailVerificationSession(input: resendEmailVerificationSessionInput!): loginResponse
        @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\AuthenticatedSessionSPAController@resendEmailVerification")
    # updateUserPassword(input: updateUserPassword): Response @guard
    #     @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\PasswordController@update")
    # enableOtpSession(input: enable): Response @guard
    #     @field(resolver: "App\\Http\\Controllers\\Api\\Auth\\PasswordController@update")
   
   #service registration
    createServiceCategory(name: String! @rules(apply: [ "string", "max:255"]), description: String! @rules(apply: [ "string", "max:255"]), is_active: Boolean): ServiceCategory @guard @create
    updateServiceCategory(id: ID!, name: String! @rules(apply: [ "string", "max:255"]), description: String! @rules(apply: [ "string", "max:255"])): ServiceCategory @guard @update
    deleteServiceCategory(id: ID!): ServiceCategory @guard @delete
    createServiceSubCategory(service_category_id: Int! @rules(apply: ["required", "exists:service_categories,id"]), name: String! @rules(apply: [ "string", "max:255"]), description: String! @rules(apply: [ "string", "max:255"]), is_active: Boolean): ServiceSubCategory @guard @create
    updateServiceSubCategory(service_category_id: Int! @rules(apply: ["required", "exists:service_categories,id"]), id: ID!, name: String!, description: String! @rules(apply: [ "string", "max:255"]), is_active: Boolean): ServiceSubCategory @guard @update
    deleteServiceSubCategory(id: ID!): ServiceSubCategory @delete
    createService(service_sub_category_id: Int! @rules(apply: ["required", "exists:service_sub_categories,id"]), name: String! @rules(apply: [ "string", "max:255"]), description: String! @rules(apply: [ "string", "max:255"]), is_active: Boolean): Service @guard @create
    updateService(service_sub_category_id: Int! @rules(apply: ["required", "exists:service_sub_categories,id"]), id: ID!, name: String! @rules(apply: [ "string", "max:255"]), description: String! @rules(apply: [ "string", "max:255"]), is_active: Boolean): Service @guard @update
    deleteService(id: ID!): Service @guard @delete

    #package registration
    createPackageMemberShip(input: CreateMembershipCategoryInput): MembershipCategory @guard @create
    updatePackageMemberShip(input: UpdateMembershipCategoryInput): MembershipCategory @guard @update
    deletePackageMemberShip(id: ID!): MembershipCategory @guard @delete
    createPackageClass(input: CreateMembershipClassInput): MembershipClass @guard @create
    updatePackageClass(input: UpdateMembershipClassInput): MembershipClass @guard @update
    deletePackageClass(id: ID!): MembershipClass @delete
    createPackagePlan(input: CreatePackagePlanInput): PackagePlan @guard @create
    updatePackagePlan(input: UpdatePackagePlanInput): PackagePlan @guard @update
    deletePackagePlan(id: ID!): PackagePlan @guard @delete
    createPackageFeature(input: CreatePackageFeatureInput): PackageFeature @guard @create
    updatePackageFeature(input: UpdatePackageFeatureInput): PackageFeature @guard @update
    deletePackageFeature(id: ID!): PackageFeature @guard @delete

}
#import services.graphql
#import services_provider_registration.graphql
#import auth.graphql
#import packages_registration.graphql
#import client_registration.graphql
